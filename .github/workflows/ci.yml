name: C++ CI Workflow

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-18.04, ubuntu-20.04]

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        mamba-version: "*"
        channels: conda-forge, defaults
        channel-priority: true

    - name: Remove broken apt repos [Ubuntu]
      if: contains(matrix.os, 'ubuntu')
      run: for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

    - name: Dependencies [Shared]
      shell: bash -l {0}
      run: |
        mamba install cmake compilers make pkg-config
        mamba install -c robotology yarp eigen mlpack pcl opencv

    - name: Dependencies (from source) [Ubuntu]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # bayes-filters-lib
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/bayes-filters-lib
        cd bayes-filters-lib
        git checkout devel
        mkdir build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} ..
        cmake --build . --config ${{ matrix.build_type }} --target install

        # nanoflann
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/jlblancoc/nanoflann
        cd nanoflann
        mkdir build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DNANOFLANN_BUILD_EXAMPLES:BOOL=OFF -DNANOFLANN_BUILD_TESTS:BOOL=OFF ..
        cmake --build . --config ${{ matrix.build_type }} --target install

    - name: Configure CMake [Ubuntu]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ..

    - name: Build
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{matrix.build_type}}
